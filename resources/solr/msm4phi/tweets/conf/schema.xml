<?xml version="1.0" ?>

<!--  
 This is the Solr schema file for TATA-STEEL Terminology Recognition content indexing engine.
 -->
<schema name="tweets" version="2.0">
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the 
       <types> fieldType section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     termPayloads: Store payload information with the term vector. This
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->
	<types>
		<fieldtype name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true" />
		
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
	
		<!-- This will stop your Solr from crashing when Tika index fields that Solr don't know of. -->
		<fieldtype name="binary" class="solr.BinaryField"/>
		
		<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
			 is a more restricted form of the canonical representation of dateTime
			 http://www.w3.org/TR/xmlschema-2/#dateTime    
			 The trailing "Z" designates UTC time and is mandatory.
			 Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
			 All other components are mandatory.

			 Expressions can also be used to denote calculations that should be
			 performed relative to "NOW" to determine the value, ie...

				   NOW/HOUR
					  ... Round to the start of the current hour
				   NOW-1DAY
					  ... Exactly 1 day prior to now
				   NOW/DAY+6MONTHS+3DAYS
					  ... 6 months and 3 days in the future from the start of
						  the current day
						  
			 Consult the TrieDateField javadocs for more information.

			 Note: For faster range queries, consider the tdate type
		-->
		<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>
		<!--<fieldType name="pdate" class="solr.DateField" sortMissingLast="true" />-->
		<fieldType name="pdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>		
		
		
	    <field name="payloads" type="payloads" indexed="true" stored="true"/>
			
		<fieldType name="payloads" stored="false" indexed="true" class="solr.TextField" >
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<!--
				The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
				a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
				Attributes of the DelimitedPayloadTokenFilterFactory : 
				 "delimiter" - a one character delimiter. Default is | (pipe)
			 "encoder" - how to encode the following value into a playload
				float -> org.apache.lucene.analysis.payloads.FloatEncoder,
				integer -> o.a.l.a.p.IntegerEncoder
				identity -> o.a.l.a.p.IdentityEncoder
					Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
				 -->
				<filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
			</analyzer>
		</fieldType>
		
		<!--
		 Numeric field types that index each value at various levels of precision
		 to accelerate range queries when the number of values between the range
		 endpoints is large. See the javadoc for NumericRangeQuery for internal
		 implementation details.

		 Smaller precisionStep values (specified in bits) will lead to more tokens
		 indexed per value, slightly larger index size, and faster range queries.
		 A precisionStep of 0 disables indexing at different precision levels.
		-->
		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
		
		<!-- The "RandomSortField" is not used to store or search any
			 data.  You can declare fields of this type it in your schema
			 to generate pseudo-random orderings of your docs for sorting 
			 or function purposes.  The ordering is generated based on the field
			 name and the version of the index. As long as the index version
			 remains unchanged, and the same field name is reused,
			 the ordering of the docs will be consistent.  
			 If you want different psuedo-random orderings of documents,
			 for the same version of the index, use a dynamicField and
			 change the field name in the request.
		 -->
		<fieldType name="random" class="solr.RandomSortField" indexed="true" />	
		<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
		<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.ASCIIFoldingFilterFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				<!-- in this example, we will only use synonyms at query time <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
				<filter class="solr.LowerCaseFilterFactory" />				
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.ASCIIFoldingFilterFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>			
	</types>
	

	<fields>
	    <!-- field names should consist of alphanumeric or underscore characters only and
		  not start with a digit.  This is not currently strictly enforced,
		  but other field names will not have first class support from all components
		  and back compatibility is not guaranteed.  Names with both leading and
		  trailing underscores (e.g. _version_) are reserved.
	    -->
	<field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>
	<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
        <field name="created_at" type="tdate" indexed="true" stored="true" multiValued="false"/>
	<field name="geo" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="coordinates" type="string" indexed="true" stored="true" multiValued="true"/>
	<field name="favorite_count" type="int" indexed="true" stored="true" multiValued="false"/>	

	<field name="in_reply_to_screen_name" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="in_reply_to_status_id_str" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="in_reply_to_user_id_str" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="reply_count" type="int" indexed="true" stored="true" multiValued="false"/>	

	<field name="lang" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="place_full_name" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="place_coordinates" type="string" indexed="true" stored="true" multiValued="true"/>

	<field name="retweet_count" type="int" indexed="true" stored="true" multiValued="false"/>	
	<field name="retweeted" type="boolean" indexed="true" stored="true" multiValued="false"/>
	<field name="retweeted_status_id_str" type="string" indexed="true" stored="true" required="true" multiValued="false" />
	
	<field name="quoted_status_id_str" type="string" indexed="true" stored="true" multiValued="false"/>		
	<field name="is_quote_status" type="string" indexed="true" stored="true" multiValued="false"/>	
	<field name="quote_count" type="int" indexed="true" stored="true" multiValued="false"/>	

	<field name="status_text" type="text_general" indexed="true" stored="true" multiValued="false"/>
	<field name="entities_hashtag" type="string" indexed="true" stored="true" multiValued="true"/>
	<field name="entities_symbol" type="string" indexed="true" stored="true" multiValued="true"/>
	<field name="entities_url" type="string" indexed="true" stored="true" multiValued="true"/>
	<field name="entities_user_mention" type="string" indexed="true" stored="true" multiValued="true"/>
	<field name="user_id" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="user_screen_name" type="string" indexed="true" stored="true" multiValued="false"/>
	<field name="user_statuses_count" type="int" indexed="true" stored="true" multiValued="false"/>
	<field name="user_friends_count" type="int" indexed="true" stored="true" multiValued="false"/>
	<field name="user_followers_count" type="int" indexed="true" stored="true" multiValued="false"/>
	<field name="user_location" type="string" indexed="true" stored="true" multiValued="false"/>	
	<field name="user_location_coordinates" type="string" indexed="true" stored="true" multiValued="true"/>	

       	<dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
	   <dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>
	   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
	   <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
	   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
	   <dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>
	   <dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>
	   <dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>
	   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
	   <dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>
	   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
	   <dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>
       <dynamicField name="random_*" type="random" />
   
	   <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->	     
	</fields>

	<uniqueKey>id</uniqueKey>

	<defaultSearchField>id</defaultSearchField>

	<solrQueryParser defaultOperator="OR" />
</schema>
